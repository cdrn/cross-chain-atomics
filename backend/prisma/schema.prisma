generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExchangePrice {
  timestamp   DateTime @db.Timestamptz
  exchange    String   @db.VarChar(50)
  baseAsset   String   @db.VarChar(10)
  quoteAsset  String   @db.VarChar(10)
  price       Decimal  @db.Decimal(24, 8)
  volumeBase  Decimal  @db.Decimal(24, 8)
  volumeQuote Decimal  @db.Decimal(24, 8)

  @@id([timestamp, exchange, baseAsset, quoteAsset])
  @@index([baseAsset, quoteAsset, exchange])
}

model ConsolidatedPrice {
  timestamp        DateTime @db.Timestamptz
  baseAsset        String   @db.VarChar(10)
  quoteAsset       String   @db.VarChar(10)
  vwap             Decimal  @db.Decimal(24, 8)
  totalVolumeBase  Decimal  @db.Decimal(24, 8)
  totalVolumeQuote Decimal  @db.Decimal(24, 8)
  numExchanges     Int

  @@id([timestamp, baseAsset, quoteAsset])
}

model VolatilityMetric {
  timestamp      DateTime @db.Timestamptz
  baseAsset      String   @db.VarChar(10)
  quoteAsset     String   @db.VarChar(10)
  volatility1h   Decimal? @db.Decimal(10, 4)
  volatility24h  Decimal? @db.Decimal(10, 4)
  volatility7d   Decimal? @db.Decimal(10, 4)
  sampleCount1h  Int?
  sampleCount24h Int?
  sampleCount7d  Int?
  lastUpdated    DateTime @db.Timestamptz

  @@id([timestamp, baseAsset, quoteAsset])
}

// RFQ Models
model Solver {
  id             String   @id @default(uuid())
  name           String
  address        String
  supportedPairs Json // Array of { baseAsset: string, quoteAsset: string, chain: string }
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  quotes RFQQuote[]
  orders RFQOrder[]

  @@index([address])
}

model RFQRequest {
  id               String   @id @default(uuid())
  baseAsset        String   @db.VarChar(10)
  quoteAsset       String   @db.VarChar(10)
  baseChain        String   @db.VarChar(20)
  quoteChain       String   @db.VarChar(20)
  amount           Decimal  @db.Decimal(36, 18)
  direction        String   @db.VarChar(4) // "buy" or "sell"
  timeToLive       Int // seconds
  requesterAddress String
  status           String   @db.VarChar(10)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  quotes RFQQuote[]
  order  RFQOrder?

  @@index([baseAsset, quoteAsset])
  @@index([status])
  @@index([requesterAddress])
}

model RFQQuote {
  id          String   @id @default(uuid())
  requestId   String
  solverId    String
  baseAmount  Decimal  @db.Decimal(36, 18)
  quoteAmount Decimal  @db.Decimal(36, 18)
  premium     Decimal  @db.Decimal(36, 18)
  expiryTime  Int
  signature   String?  @db.Text
  status      String   @db.VarChar(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  request RFQRequest @relation(fields: [requestId], references: [id])
  solver  Solver     @relation(fields: [solverId], references: [id])
  order   RFQOrder?

  @@index([requestId])
  @@index([solverId])
  @@index([status])
}

model RFQOrder {
  id               String   @id @default(uuid())
  requestId        String   @unique
  quoteId          String   @unique
  solverId         String
  requesterAddress String
  solverAddress    String
  baseAsset        String   @db.VarChar(10)
  quoteAsset       String   @db.VarChar(10)
  baseChain        String   @db.VarChar(20)
  quoteChain       String   @db.VarChar(20)
  baseAmount       Decimal  @db.Decimal(36, 18)
  quoteAmount      Decimal  @db.Decimal(36, 18)
  premium          Decimal  @db.Decimal(36, 18)
  timelock         Int
  status           String   @db.VarChar(20)
  baseTxHash       String?
  quoteTxHash      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  request RFQRequest @relation(fields: [requestId], references: [id])
  quote   RFQQuote   @relation(fields: [quoteId], references: [id])
  solver  Solver     @relation(fields: [solverId], references: [id])

  @@index([status])
  @@index([requesterAddress])
  @@index([solverAddress])
}
